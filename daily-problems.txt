14th Feb -> Product of the Last K Numbers
1) do a normal loop
2) create a cumilative product, reset it whenever 0 occurs cause usse pehle to 0 hoga hi toh push only cum prod until 0 occurs then 0 so if cum array.size < k then 0 size==k return cum[k-1] else: return cum[cum.back[]-cum.size()-k-1] 

####
Letter Tile Possibilities
1)Ahh so there are 26 letters we will make a freq array of letters, we will create a recursive call for each pos i in tiles.size() out of each pos we will start a loop through array for choice going forward decreasing that freq and out of loop again setting it back cause when loop starts at B for first position no frequency of A should still be same and this won't count repeated cases cause Out of 26 we can take A in one position once only 


repeat  this

#####
26th Feb) Maximum absolute sum of subarray
 a a a a a
_______(r)
__(l)

subarray sum = csum(r)-csum(l-1)
what can be the max sum if csum[i]>0  csum[i] -(lowest negative value ) we have seen till them
if csum[i]<0 - (highest positive value) we have seen till then 

we can coclude it will be 
This is because the sum of any subarray between indices i and j can be expressed as prefixSum[j] - prefixSum[i]. The greater the difference between prefixSum[j] and prefixSum[i], the larger the absolute sum of the subarray. Thus, to maximize this difference, prefixSum[j] should be as large as possible, while prefixSum[i] should be as small as possible.

#####
3rd March) Partition Array According to Given Pivot
Brute which works O(n)
1) find first pos of pivot
2)create ans, post and mid vector
all vec[n]<pivot[key]-> push ans
vec[n]>pivot[key]-> post
==pivot mid
ans+=mid + post

other is 
calculate intial pos
less than=l
equal=m
so pos will be 0,m and l+m for all three parts
this will help us creating a vector of definite size than dynamic

3rd is 2 pointers to taverse

12th March) maximum-count-of-positive-integer-and-negative-integer
Use binary search upper bound and lower bound

########
4th June https://leetcode.com/problems/maximum-candies-you-can-get-from-boxes

1) So it is like we have to check for each box when we get a box I was doing DFS as intutive bruteforce
2) What we can do is maitain a queue and start pushing boxes which are open or we have a key
3) Or we can DO Bfs untill we can't open a box or no box is left


https://leetcode.com/problems/find-the-lexicographically-largest-string-from-the-box-i/description/?envType=daily-question&envId=2025-06-04

1) if friend==1 return the whole word otherwise, lenth will be words.size() - num_of_friends +1
2) Find the lexicographically largest alphabet if repeating twice store index and create string ans = (ele <= n - i) ? word.substr(i, ele) : word.substr(i); means if greater than ele then extract substring of length ele otherwise till the end word.substr(i) compare between them and return

#######
6th june
https://leetcode.com/problems/using-a-robot-to-print-the-lexicographically-smallest-string/solutions/6816172/beats-super-easy-beginners-java-c-c-python-javascript-dart/
do it again not able to get answer

class Solution {
public:
    string robotWithString(string s) {

        map<char,int> mpp;
        stack<char> stk;
        string lstring;

        //Lets create a frequency map to determine each time of there is a char left
        // how it helps instead of going over whole string(n) we go over constant 26

        for(int i=0;i<s.size();i++){
            mpp[s[i]]++;
        }

        // Now we will hover over string see if we have some lexigropahically small char then 
        //we'll push into stack other wise pop


        char minChar='a';
        for(int i=0;i<s.size();i++){

            stk.push(s[i]);
            mpp[s[i]]--; // remove 1 frequency of that char

            // this is the 2nd element 
            while(minChar!='z' && mpp[minChar]==0){
                minChar++;
            }

            while(!stk.empty() && stk.top()<=minChar){

                lstring+=stk.top();
                stk.pop();

            }

        }

        return lstring;
    }
};

Okay remember whenever alphabet lexicographically use of frequency map
