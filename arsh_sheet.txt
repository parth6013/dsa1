ARRAY 

1.1)  Find missing in 1-n
#use n^2
#use map
#whenever see a +ve integer flip it negative when see  
#use slow and fast pointers totoise approach

1.2) Sort array of 0,1,2 
#use sorting
#count number of 0,1,2 and change in array;
#use dutch algorithm ,idea is use low,mid high keep all 0 towars left of low , all 2 right of high
means if mid=0 swap(low,mid) low++,mid++;if mid=1,mid++ if mid=2 swap(mid,high) high-- 


1.3) Remove duplicate
#use simple loop and logical


1.4) Set matrix zero
#treverse n^2 use extra space m+n
#traverse n^2 use first row and column as extra space


1.5) Move zeros
# use two pointers and logic;

1.6) buy and sell stock
# faltu compare very easy

1.7) Chocolate distribution
#sort and do a slising window min at ends

1.8) two sum
#use hash map

1.9) buy and sell stocks 2
#dp 
#greedy approach find local maxima and minima and do or else 
we can write d-a= b-a + c-b + d-c;

1.10) no of subarray sum divisible by k
#make subarray check sum divisible by k - O(n^2)
#we will use the property if if two sub array sum is equal it means 
k1*a + x = k2*b +x ,then we have k1*(a-b)=0 which we want at least one answer if we get same remainder 
frequenck n times means there are n ,if remainder is negative make it +ve by addig k as k(n) -x +k -k=k(n-1)+k(-x)

1.11) find all duplicate
#sort and check -nlogn
#use unordered map
#flip number to negative


1.12)Container with most water
#using two pointer , widest container will have mpre and then for less wider increase where height is more

1.13) 3 sum
#sort the array make a loop keep two pointers check for duplicates by going by skipping

1.14) 4 sum

1.15) maximum sum you can obtain from array picking from left or rigght
#sliding window total sum -(n-k)window sum 

1.16) no of subarray with sum k
3 we will use hashmap we will use property to find how many times sum-k =x that x is present because that
many times k will be there and we add 0 to check that fore whole array we store cumulative sum in hash map

1.17) Return all elements in spiral matrix
keep 4 pointer top,down,left,right then make a while loop move them accordingly



1.18) word search
#brute logic and recursion make word visited so we dont go multiple time sin it change it back for other 
searches

1.19)jump game 
#dp
#greedy if reach is < i break reach is max(reach,i+ nums[i])

1.20) sorted array merge
#start from behind take bigger of two element --
then while(j>=0){
    do the thang
}

1.21) Majority Element
#use hashmap
#using moore algorith means we know element exist greater than n/2 times 
we take first elemnt and +1 if same else i1 if cnt==0 then change that element ultimately we will 
be left with majority element in that

1.22) Reverse Pair


1.23) print all possible pair in r
#use n^2

1.24) Game of life
#simple traversing if else if dont want to use extra space use new int value and then travese and
change accordingly
 


2) STRINGS

2.1) VAlID PARETHESIS
#use stack

2.2) print all duplicates
#use hashmap

2.3) implement strstr
#brute force

2.4) longest common prefix  in given vector of STRINGS
#sort(using sort function it sorts lexicographically) them so the common prefix in first and last is the longest

2.5) is palindrome 2 (deletion of 1 element)
# when not equal ans= i+1 || j-1 check palindrome

2.6) ROman to integer
#make string of thousand hundred tens one then number divide and give answer
#if integer to roman loop from behind to front f not greater in value minus

2.7) Generate Parenthesis
#recurion

2.8) Simplify Path yet to be done



2.9) smallest window in a string having string t
# make 2 map ,in 1 store frequency of t then in 2 if mpp.find mpp2[s[i]]++
if mpp2[s[i]]<=mpp[s[i]]
cnt++
if cnt==t.size() start with 2 pointer and remove elements while cnt is same 


2.10) reverse words in a string 
#use stack

2.11) Rabin Karp method to find pattern


2.12)Group Anagrams
#use hashmap , sort the string store their indexes


3) MATRIX ROBLEMS
3.1) maximal rectangle 
sub problems - first smallest element on left (using a stack as each element 
is push or pull once hence 0(n))and smallest ellement on right
-maximum area of histrogram
then we can find maximal rectangle






4) MATHEMETICAL PROBLEMS

4.1) minimum moves to make element equal ,increment n-1 element by 1
#We have to increment n-1 elements by 1 to make them equal. This is equal to decrementing only 1 element by 1. 
Since we need to make all the elements equal we can consider he given problem to be equal to decrementing
all the elements by 1 in each move until they are equal to the minimum element in the array.

4.2) add binary

4.3)maximum product of three numbers
#we are concerned with last two numbers in sorted array and three best in sorted array

4.4)convert column number into aplphabert
# char c=char((n-1)%26 +'A');
            ans=c+ans;
            n=(n-1)/26;

4.5)

**************STRIVER INTRUSION*******BINARY SEARCH QUESTIONS*************

1) Nth root of a number 
double multiply(double m,int n){
    double ans=1.00;
    while(n>0){
        ans*=m;
        n--;
    }
    return ans;
}
double findNthRootOfM(int n, long long m) {
    double l=0,r=m+1,esp=1e-8;(precison till 6 part)
    while((r-l)>esp){
        double mid=(l+r)/2.00;
        if(multiply(mid,n) < (double)m){
            l=mid;
        }
        else{
            r=mid;
        }
    }
    return l;
}


2)


In such questions we observe and try to find the break point by shrinking

4)observation either left half is sorted or right half   

5) l1<=r2
l2<=r1
so that left half becomes what we want

6) agreesive cow 
defining sample size low= min ans possible high =max ans possible

**************************************************************************************************



5) Sorting and Searching

# first four easy

5.5)



######### GRAPHS############################################

1)cycle in unidirected GRAPH
#we only check if there is one more way to come at that node and they way we have
come back was

2)cycle in directed graph 
#we can reach a point by two ways but it dosen't ensure a cycle a->b,a->c,c->b ending point 
is anyway b,we have to also ensure from b it goes to a path which is already traverse

#this is also known as detect a back edge

3)single source shortest path we get to know that the first time we visit a node in
bfs that is the shortest ditance in itself

4)minimum steps by knight single source shortest path or dp solution





